#!/bin/sh

### This script will be executed when package installed and upgraded.
### Actions after package installed.
### ex. create database, create symbolic link...


#Useful Environment Variables
# SYNOPKG_PKGNAME     - Package Name from INFO
# SYNOPKG_PKGVER      - Package Version from INFO
# SYNOPKG_PKGDEST     - Target directory for storage of the package
# SYNOPKG_PKGDEST_VOL - Target Volume where package is stored
# SYNOPKG_PKGPORT     - Admin Port as defined in INFO

# SYNOPKG_TEMP_UPGRADE_FOLDER - Temp folder for moving data to/from between preupgrade and postupgrade
# SYNOPKG_TEMP_LOGFILE        - Temporary logfile for scripts to log to

hdhr_web_path="$SYNOPKG_PKGDEST/web"
hdhr_bin_path="$SYNOPKG_PKGDEST/bin"
hdhr_etc_path="$SYNOPKG_PKGDEST/etc"
syno_web_path="/var/services/web/HDHomeRunDVR"
hdhr_bin="hdhomerun_record_linux"
hdhr_conf="HDHomeRunDVR.conf"
http_user="http:http"
hdhr_user="http"
hdhr_wrap_arm="hdhr_wrapper_arm"
hdhr_wrap_x86="hdhr_wrapper_x86_64"
arch=`uname -m`
hdhr_arch_log=/tmp/hdhr_arch_choice

create_web_ui() {
	cp -R $hdhr_web_path $syno_web_path
	chown -R http:http $syno_web_path
	chmod -R 755 $syno_web_path
}

delete_web_ui() {
	rm -rf $syno_web_path
}

update_vars_file() {
	sed -i "s!\(DVRUI_version\s*=\).*!\1\"$SYNOPKG_PKGVER\";!" $syno_web_path/vars.php
	sed -i "s!\(DVR_pkgPath\s*=\).*!\1\"$SYNOPKG_PKGDEST\";!" $syno_web_path/vars.php
}

backup_conf_file() {
	cp $hdhr_etc_path/$hdhr_conf $SYNOPKG_TEMP_UPGRADE_FOLDER
}

restore_conf_file() {
	cp $SYNOPKG_TEMP_UPGRADE_FOLDER/$hdhr_conf $hdhr_etc_path
}

create_recordings_path() {
	RECORDING_PATH="$SYNOPKG_PKGDEST_VOL/$SYNOPKG_PKGNAME"
	if [ ! -d $RECORDING_PATH ] ; then
		mkdir $RECORDING_PATH
	fi
	sed -i "s!\(RecordPath\s*=\).*!\1$RECORDING_PATH!" $hdhr_etc_path/$hdhr_conf
	chown -R http:http $RECORDING_PATH
	chmod -R u+w $RECORDING_PATH
}

adjust_permissions() {
	chown $http_user $hdhr_etc_path/$hdhr_conf
	chown $http_user $hdhr_bin_path/$hdhr_bin
}

remove_recordings_path() {
	echo "Does Nothing - leave removing the dir to the user"
}

start_engine() {
	if [[ $EUID -ne 0 ]]; then
		$hdhr_bin_path/$hdhr_bin start --conf $hdhr_etc_path/$hdhr_conf
	else
		if [[ "$arch" =~ "arm"* ]]; then
			echo "Determined Platform is ARM from $arch" >> $hdhr_arch_log
			$hdhr_bin_path/$hdhr_wrap_arm -u $hdhr_user -b $hdhr_bin_path/$hdhr_bin -- start --conf $hdhr_etc_path/$hdhr_conf
		elif [[ "$arch" =~ "x86_64"* ]]; then
			echo "Determined Platform is x86_64 from $arch" >> $hdhr_arch_log
			$hdhr_bin_path/$hdhr_wrap_x86 -u $hdhr_user -b $hdhr_bin_path/$hdhr_bin -- start --conf $hdhr_etc_path/$hdhr_conf
		else
			echo "Unable to determine the platform - will default to no wrapper" >> $hdhr_arch_log
			$hdhr_bin_path/$hdhr_bin start --conf $hdhr_etc_path/$hdhr_conf
		fi
	fi
}

stop_engine() {
	$hdhr_bin_path/$hdhr_bin stop
}

status_engine() {
	$hdhr_bin_path/$hdhr_bin version
	$hdhr_bin_path/$hdhr_bin status
}

